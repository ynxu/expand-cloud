server:
  port: 8012
  servlet:
    context-path: /test

spring:
  application:
    name: service-test

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8010/eureka/

feign:
  hystrix:
    enabled: true
  client:
    config:
      #JDK默认HttpURLConnection 实现的 Http Client配置
      default:
        #连接超时时间
        connectTimeout: 5000
        #读取超时时间
        readTimeout: 5000
        loggerLevel: full
        #错误解码器
#        errorDecoder: com.wudimanong.client.common.FeignClientErrorDecoder
        #解码器
#        encoder: com.wudimanong.client.common.FeignClientEncoder
        #编码器
#        decoder: com.wudimanong.client.common.FeignClientDecoder

management:
  endpoints:
    web:
      exposure:
        include: "*"

#ribbon:
#  #说明：同一台实例的最大自动重试次数，默认为1次，不包括首次
#  MaxAutoRetries: 1
#  #说明：要重试的下一个实例的最大数量，默认为1，不包括第一次被调用的实例
#  MaxAutoRetriesNextServer: 1
#  #说明：是否所有的操作都重试，默认为true
#  OkToRetryOnAllOperations: true
#  #说明：从注册中心刷新服务器列表信息的时间间隔，默认为2000毫秒，即2秒
#  ServerListRefreshInterval: 2000
#  #说明：使用Apache HttpClient连接超时时间，单位为毫秒
#  ConnectTimeout: 3000
#  #说明：使用Apache HttpClient读取的超时时间，单位为毫秒
#  ReadTimeout: 3000
#  #说明：初始服务器列表，不需要手工配置，在运行时动态根据注册中心更新
#  listOfServers: www.microsoft.com:80,www.yahoo.com:80,www.google.com:80


hystrix:
  command:
    #全局默认配置
    default:
      #线程隔离相关
      execution:
        timeout:
          #是否给方法执行设置超时时间，默认为true。一般我们不要改。
          enabled: true
        isolation:
          #配置请求隔离的方式，这里是默认的线程池方式。还有一种信号量的方式semaphore，使用比较少。
#          strategy: threadPool
          thread:
            #方式执行的超时时间，默认为1000毫秒，在实际场景中需要根据情况设置
            timeoutInMilliseconds: 1000
            #发生超时时是否中断方法的执行，默认值为true。不要改。
            interruptOnTimeout: true
            #是否在方法执行被取消时中断方法，默认值为false。没有实际意义，默认就好！
            interruptOnCancel: false
      #熔断器相关配置
      circuitBreaker:
        #说明：是否启动熔断器，默认为true。我们使用Hystrix的目的就是为了熔断器，不要改，否则就不要引入Hystrix。
        enabled: true
        #说明1：启用熔断器功能窗口时间内的最小请求数，假设我们设置的窗口时间为10秒，
        #说明2：那么如果此时默认值为20的话，那么即便10秒内有19个请求都失败也不会打开熔断器。
        #说明3：此配置项需要根据接口的QPS进行计算，值太小会有误打开熔断器的可能，而如果值太大超出了时间窗口内的总请求数，则熔断永远也不会被触发
        #说明4：建议设置一般为：QPS*窗口描述*60%
        requestVolumeThreshold: 20
        #说明1：熔断器被打开后，所有的请求都会被快速失败掉，但是何时恢复服务是一个问题。熔断器打开后，Hystrix会在经过一段时间后就放行一条请求
        #说明2：如果请求能够执行成功，则说明此时服务可能已经恢复了正常，那么熔断器会关闭；相反执行失败，则认为服务仍然不可用，熔断器保持打开。
        #说明3：所以此配置的作用是指定熔断器打开后多长时间内允许一次请求尝试执行，官方默认配置为5秒。
        sleepWindowInMilliseconds: 5000
        #说明1:该配置是指在通过滑动窗口获取到当前时间段内Hystrix方法执行失败的几率后，根据此配置来判断是否需要打开熔断器
        #说明2:这里官方的默认配置为50，即窗口时间内超过50%的请求失败后就会打开熔断器将后续请求快速失败掉
        errorThresholdPercentage: 50
        #说明：是否强制启用熔断器，默认false，没有什么场景需要这么配置，忽略！
        forceOpen: false
        #说明：是否强制关闭熔断器，默认false，没有什么场景需要这么配置，忽略！
        forceClosed: false

logging:
  level:
    com.tonot.test.feign.UserFeign: debug